% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plspm_multigroups.R
\name{plspm_multigroups}
\alias{plspm_multigroups}
\title{plspm에서 3개 그룹을 비교하는 경우, p보정 방법 포함}
\usage{
plspm_multigroups(
  plspm_boot,
  group,
  method = "bootstrap",
  type = "all",
  adjust = FALSE,
  adjust.method = "bonferroni"
)
}
\arguments{
\item{plspm_boot}{bootstap data}

\item{group}{group variable set ="grade"}

\item{method}{bootstrap, permutation}

\item{type}{all, grp1, grp2, grp3, ...}

\item{adjust}{default FALSE}

\item{adjust.method}{"bonferroni", "holm", "hochberg", "BH", "BY"}
}
\value{
data
}
\description{
plspm에서 3개 그룹을 비교하는 경우, p보정 방법 포함
}
\examples{
\dontrun{
#'
# 사용 예시

#구조모형
jutpath1 = plspm_paths(
  row_names = c("SelfEff","CarMot","CarAtt","CarAct"),
  relationship = list(
    path(from="SelfEff", to=c("CarMot","CarAtt","CarAct")),
    path("CarMot", c("CarAct")),
    path("CarAtt", c("CarAct"))
  )  )
jutpath1

jutpath1 \%>\% plspm_paths2lav()\%>\%cat()


# 측정 모형
jut_blocks <- plspm_blocks(
  SelfEff = item("sef01", "sef02", "sef03", "sef04", "sef05"),
  CarMot = item("mot01","mot02","mot03"),
  #   CarAtt = item( "att01", "att02","att03","att04","att05" ),
  CarAtt = item("att03","att04","att05" ),
  CarAct = item("act01", "act02","act03")
)
jut_blocks

jut_blocks \%>\%plspm_blocks2lav()\%>\%cat()



# 데이터 분석 : bootstrap
jutpls_boot = plspm_sem(Data= jut7c,
                        path_matrix = jutpath1,
                        blocks = jut_blocks,seed=19988,
                        br = 5000, summary= TRUE)
# p.adjust() 함수: R에서 제공하는 함수로, 선택된 보정 방법에 맞춰 p-value를 보정한다. p.adjust() 함수는 다양한 다중 비교 보정 방법을 지원한다.
# "bonferroni": 보수적인 Bonferroni 보정.
# "holm": Holm 보정.
# "hochberg": Hochberg 보정.
# "BH": Benjamini-Hochberg 보정.
# "BY": Benjamini-Yekutieli 보정.
# Benjamini-Hochberg 보정을 적용하여 결과 조회
plspm_multigroups(jutpls_boot, group = jut7c$LCA_class,
                  type = "all", adjust = TRUE, adjust.method = "bonferroni")

plspm_multigroups(jutpls_boot, group = jut7c$LCA_class,
                  type = "all", adjust = FALSE, adjust.method = "bonferroni")

plspm_multigroups(jutpls_boot, group = jut7c$LCA_class, method="permutation",
                  type = "all", adjust = FALSE, adjust.method = "bonferroni")

plspm_multigroups(jutpls_boot, group = jut7c$LCA_class, type = "grp1")
plspm_multigroups(jutpls_boot, group = jut7c$LCA_class, type = "grp2")
plspm_multigroups(jutpls_boot, group = jut7c$LCA_class, type = "grp3")

#정한 방법
jut_lca_comparison <- plspm_multigroups(jutpls_boot, group = jut7c$LCA_class)
jut_lca_comparison$Class1_vs_Class2$test
jut_lca_comparison$Class1_vs_Class3$test
jut_lca_comparison$Class2_vs_Class3$test


plspm_multigroups(jutpls_boot, group = jut7c$LCA_class,
                  type = "all", adjust = TRUE, adjust.method = "holm")

plspm_multigroups(jutpls_boot, group = jut7c$LCA_class,
                  type = "all", adjust = FALSE, adjust.method = "holm")

plspm_multigroups(jutpls_boot, group = jut7c$LCA_class,
                  type = "all", adjust = TRUE, adjust.method = "hochberg")
plspm_multigroups(jutpls_boot, group = jut7c$LCA_class,
                  type = "all", adjust = FALSE, adjust.method = "hochberg")

plspm_multigroups(jutpls_boot, group = jut7c$LCA_class,
                  type = "all", adjust = TRUE, adjust.method = "BH")

plspm_multigroups(jutpls_boot, group = jut7c$LCA_class,
                  type = "all", adjust = TRUE, adjust.method = "BY")
#'
#'
}
}
